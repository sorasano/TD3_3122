#include "FbxShadowHeader.hlsli"

//0番スロットに設定されたテクスチャ
Texture2D<float4> tex : register(t0);
//シャドウマップ
Texture2D<float4> shadow_map : register(t1);
//0番スロットに設定されたサンプラー
SamplerState smp : register(s0);
//1番スロットに設定されたサンプラー
SamplerState smp1 : register(s1);
//エントリーポイント
//float4 main(VSOutput input) : SV_TARGET
//{
//	//テクスチャマッピング
//	float4 texcoord = tex.Sample(smp,input.uv);
//	//Lambert反射
//	float3 light = normalize(float3(1,-1,1));	//右下奥 向きのライト
//	float diffuse = saturate(dot(-light, input.normal));
//	float brightness = diffuse + 0.3f;
//	float4 shadecolor = float4(brightness, brightness, brightness, 1.0f);
//	//陰影とテクスチャの色を合成
//	return shadecolor * texcoord;
//}

float4 main(VSOutput input) : SV_TARGET
{
	//テクスチャマッピング
	float4 texcoord = tex.Sample(smp,input.uv);
	//Lambert反射
	float3 light = normalize(float3(1,-1,1));	//右下奥 向きのライト
	float diffuse = saturate(dot(-light, input.normal));
	float brightness = diffuse + 0.3f;
	float4 shadecolor = float4(brightness, brightness, brightness, 1.0f);

	//for (int i = 0; i < DIR_LIGHT_NUM; i++) {
	//	if (dirLights[i].active) {
	//		//ライトに向かうベクトルと法線の内積
	//		float3 dotlightnormal = dot(dirLights[i].lightv, input.normal);
	//		// 反射光ベクトル
	//		float3 reflect = normalize(-dirLights[i].lightv + 2 * dotlightnormal * input.normal);
	//		// 拡散反射光
	//		float3 diffuse = dotlightnormal;
	//		//全て加算する
	//		shadecolor.rgb += (diffuse) * dirLights[i].lightcolor;
	//	}
	//}

	//for (int i = 0; i < POINTLIGHT_NUM; i++)
	//{
	//	if (pointLights[i].active)
	//	{
	//		//ライトへのベクトル
	//		float3 lightv = pointLights[i].lightpos - input.worldpos.xyz;
	//		//ベクトルの長さ
	//		float d = length(lightv);
	//		//正規化し、単位ベクトルにする
	//		lightv = normalize(lightv);
	//		//距離減衰係数
	//		float atten = 1.0f / (pointLights[i].lightatten.x + pointLights[i].lightatten.y * d +
	//		pointLights[i].lightatten.z * d * d);
	//		//ライトに向かうベクトルと法線の内積
	//		float3 dotlightnormal = dot(lightv, input.normal);
	//		//反射光ベクトル
	//		float3 reflect = normalize(-lightv + 2 * dotlightnormal * input.normal);
	//		// 拡散反射光
	//		float3 diffuse = dotlightnormal;
	//		//全て加算する
	//		shadecolor.rgb += atten * (diffuse) * pointLights[i].lightcolor;
	//	}
	//}

	//for (int i = 0; i < SPOTLIGHT_NUM; i++)
	//{
	//	if (spotLights[i].active)
	//	{
	//		//ライトへの方向ベクトル
	//		float3 lightv = spotLights[i].lightpos - input.worldpos.xyz;
	//		float d = length(lightv);
	//		lightv = normalize(lightv);
	//		//距離減衰係数
	//		float atten = saturate(1.0f / (spotLights[i].lightatten.x + spotLights[i].lightatten.y * d + spotLights[i].lightatten.z * d * d)); 
	//		// 角度減衰
	//		float cos = dot(lightv, spotLights[i].lightv);
	//		//減衰開始角度から、 減衰終了角度にかけて減衰
	//		// 減衰開始角度の内側は1倍 減衰終了角度の外側は0倍の輝度
	//		float angleatten = smoothstep(spotLights[i].lightfactoranglecos.y, spotLights[i].lightfactoranglecos.x, cos);
	//		// 角度減衰を乗算
	//		atten *= angleatten;
	//		//ライトに向かうベクトルと法線の内積
	//		float3 dotlightnormal = dot(lightv, input.normal);
	//		// 反射光ベクトル
	//		float3 reflect = normalize(-lightv + 2 * dotlightnormal * input.normal);
	//		//拡散反射光
	//		float3 diffuse = dotlightnormal;
	//		//全て加算する
	//		shadecolor.rgb += atten * (diffuse) * spotLights[i].lightcolor;
	//	}
	//}

	//for (int i = 0; i < CIRCLESHADOW_NUM; i++)
	//{
	//	if (circleShadows[i].active)
	//	{
	//		// オブジェクト表面からキャスターへのベクトル
	//		float3 casterv = circleShadows[i].casterPos - input.worldpos.xyz;
	//		// 投影方向での距離
	//		float d = dot(casterv, circleShadows[i].dir);
	//		//距離減衰係数
	//		float atten = saturate(1.0f / (circleShadows[i].atten.x + circleShadows[i].atten.y * d + circleShadows[i].atten.z * d * d));
	//		// 距離がマイナスなら0にする
	//		atten *= step(0, d);
	//		// 仮想ライトの座標
	//		float3 lightpos = circleShadows[i].casterPos + circleShadows[i].dir * circleShadows[i].distanceCasterLight; 
	//		// オブジェクト表面からライトへのベクトル (単位ベクトル)
	//		float3 lightv = normalize(lightpos - input.worldpos.xyz);
	//		// 角度減衰
	//		float cos = dot(lightv, circleShadows[i].dir);
	//		//減衰開始角度から、 減衰終了角度にかけて減衰
	//		//減衰開始角度の内側は1倍減衰終了角度の外側は0倍の輝度
	//		float angleatten = smoothstep(circleShadows[i].factorAngleCos.y, circleShadows[i].factorAngleCos.x, cos); 
	//		//角度減衰を乗算
	//		atten *= angleatten;

	//		// 全て減算する 
	//		shadecolor.rgb -= atten;

	//	}
	//}

	float sm = shadow_map.Sample(smp1, input.pos.xy);
	float sma = (input.pos.z - 0.005f < sm) ? 1.0f : 0.5f;

	return tex.Sample(smp, input.uv) * sma;

	for (int i = 0; i < SHADOW_NUM; i++)
	{
		if (shadows[0].active)
		{
			// ライト目線によるZ値の再算出
			float ZValue = input.zCalcTex.z / input.zCalcTex.w;

			// 射影空間のXY座標をテクスチャ座標に変換
			float2 TransTexCoord;
			TransTexCoord.x = (1.0f + input.zCalcTex.x / input.zCalcTex.w) * 0.5f;
			TransTexCoord.y = (1.0f - input.zCalcTex.y / input.zCalcTex.w) * 0.5f;

			// リアルZ値抽出
			float SM_Z = tex.Sample(smp, texcoord).x;

			// 算出点がシャドウマップのZ値よりも大きければ影と判断
			if (ZValue > SM_Z + 0.001f) {
				input.col.rgb = input.col.rgb * 0.5f;
			}
			return float4(1, 0, 1, 1);
			return (input.col * shadecolor);
		}
	}

	//陰影とテクスチャの色を合成
	return shadecolor * texcoord;
}
